(* To test:
CM.make "sources.cm"
Parse.parse "../../testcases/test1.tig" *)

structure A = Absyn

fun decAppend (dec, []) = [dec]
  | decAppend (dec, (firstDec::l)) = case dec of
       A.FunctionDec fdl  => (case firstDec of A.FunctionDec first => [A.FunctionDec(fdl@first)]@l | _ => [A.FunctionDec fdl]@[firstDec]@l)
       | A.VarDec vd      => [A.VarDec vd]@[firstDec]@l
       | A.TypeDec tdl    => (case firstDec of A.TypeDec first => [A.TypeDec(tdl@first)]@l | _ => [A.TypeDec tdl]@[firstDec]@l)

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS

%nonterm  expSeq of (A.exp * pos) list
        | exp of A.exp 
        | program of A.exp
        | lvalue of A.var
        | lvalueTail of (A.var -> A.var)
        | calcExp of A.exp
        | arithExp of A.exp
        | compareExp of A.exp
        | booleanExp of A.exp
        | funcCall of A.exp
        | funcArgs of A.exp list
        | fundec of A.fundec
        | recordField of (A.symbol * A.exp * pos) list
        | recordCreation of A.exp
        | arrayCreation of A.exp
        | assignExp of A.exp
        | decs of A.dec list
        | dec of A.dec
        | tydec of {name: A.symbol, ty: A.ty, pos: pos}
        | ty of A.ty
        | tyfields of A.field list
        | tyfieldLeft of A.field list
        | vardec of A.dec
        | seq of A.exp
        | blockExp of A.exp
        | condExp of A.exp
        | whileExp of A.exp
        | forExp of A.exp
        | letExp of A.exp
        | valExp of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%nonassoc ASSIGN
%nonassoc DO
%nonassoc OF
%left RBRACK
%right LBRACK
%right THEN 
%right ELSE
%left OR
%left AND
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%prefer THEN ELSE LPAREN

%%
program	: exp	(exp)

exp:  
    valExp (valExp)
    | lvalue (A.VarExp(lvalue))
    | seq (seq)
    | calcExp (calcExp)
    | recordCreation (recordCreation)
    | arrayCreation (arrayCreation)
    | assignExp (assignExp)
    | blockExp (blockExp)
    | funcCall (funcCall)

expSeq:
  exp ([(exp, expleft)])
  | exp SEMICOLON expSeq ([(exp, expleft)]@expSeq)

seq:
  LPAREN expSeq RPAREN (A.SeqExp(expSeq))

(* function expression *)
funcArgs:
  exp ([exp])
  | exp COMMA funcArgs (exp::funcArgs)

funcCall:
  ID LPAREN RPAREN (A.CallExp({func = Symbol.symbol(ID), args = [], pos = IDleft}))
 | ID LPAREN funcArgs RPAREN (A.CallExp({func = Symbol.symbol(ID), args = funcArgs, pos = IDleft}))

(* declaration *)
decs: 
  ([])
  | dec decs ((
    (*PrintAbsyn.printDec(TextIO.stdOut, dec); print"\n\n"; *)
    decAppend(dec,decs)))

dec: 
  vardec (vardec)
  | tydec (A.TypeDec([tydec]))
  | fundec (A.FunctionDec([fundec]))
  
(* type declaration *)
tydec: 
  TYPE ID EQ ty ({name = Symbol.symbol(ID), ty = ty, pos = TYPEleft})

ty:   
  ID (A.NameTy(Symbol.symbol(ID), IDleft))
  | LBRACE tyfields RBRACE (A.RecordTy(tyfields))
  | ARRAY OF ID (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))

tyfields: 
  ([]) 
  | ID COLON ID tyfieldLeft ({name = Symbol.symbol(ID1), escape = ref true, typ = Symbol.symbol(ID2), pos = COLONleft}::tyfieldLeft)

tyfieldLeft: 
  ([]) 
  | COMMA ID COLON ID tyfieldLeft ({name = Symbol.symbol(ID1), escape = ref true, typ = Symbol.symbol(ID2), pos = ID1left}::tyfieldLeft)

(* variable declaration *)
vardec:
  VAR ID ASSIGN exp (A.VarDec({name = Symbol.symbol(ID), escape = ref true, typ = NONE, init = exp, pos = VARleft}))
  | VAR ID COLON ID ASSIGN exp (A.VarDec({name = Symbol.symbol(ID1), escape = ref true, typ = SOME((Symbol.symbol(ID2), ID2left)), init = exp, pos = VARleft}))

(* function declaration *)
fundec:
  FUNCTION ID LPAREN tyfields RPAREN EQ exp ({name=Symbol.symbol(ID), params = tyfields, result = NONE, body = exp, pos = FUNCTIONleft})
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=Symbol.symbol(ID1), params = tyfields, result = SOME((Symbol.symbol(ID2), ID2left)), body = exp, pos = FUNCTIONleft})

(* record declation *)
recordField: 
  ID EQ exp ([(Symbol.symbol(ID), exp, IDleft)])
  | ID EQ exp COMMA recordField ((Symbol.symbol(ID), exp, IDleft)::recordField)

recordCreation: 
  ID LBRACE RBRACE (A.RecordExp({fields = [], typ = Symbol.symbol(ID), pos = IDleft}))
  | ID LBRACE recordField RBRACE (A.RecordExp({fields = recordField, typ = Symbol.symbol(ID), pos = IDleft}))

(* array declaration *)
arrayCreation:
  ID LBRACK exp RBRACK OF exp (A.ArrayExp({typ = Symbol.symbol(ID), size = exp1, init = exp2, pos = IDleft}))

(* assignment expression *)
assignExp:
  lvalue ASSIGN exp (A.AssignExp({var = lvalue, exp = exp, pos = lvalueleft}))

(* l-value *)
lvalue: 
  ID lvalueTail (lvalueTail(A.SimpleVar(Symbol.symbol(ID), IDleft)))

lvalueTail:
  (fn id => id)
  | DOT ID lvalueTail (fn id => lvalueTail(A.FieldVar(id, Symbol.symbol(ID), DOTleft)))
  | LBRACK exp RBRACK lvalueTail (fn id => lvalueTail(A.SubscriptVar(id, exp, LBRACKleft)))

(* value expression: single value, no value *)
valExp:
  INT (A.IntExp(INT))
  | STRING (A.StringExp(STRING, STRINGleft))
  | NIL (A.NilExp)
  | LPAREN RPAREN (A.SeqExp([]))

(* block expression: condition, while, for, let *)
blockExp:
  condExp (condExp)
  | whileExp (whileExp)
  | forExp (forExp)
  | letExp (letExp)
  | BREAK (A.BreakExp(BREAKleft))

(* conditional expression *)
condExp:
  IF exp THEN exp (A.IfExp({test = exp1, then' = exp2, else' = NONE, pos = IFleft}))
  | IF exp THEN exp ELSE exp (A.IfExp({test = exp1, then' = exp2, else' = SOME(exp3), pos = IFleft}))

(* while expression *)
whileExp:
  WHILE exp DO exp (A.WhileExp({test = exp1, body = exp2, pos = WHILEleft}))

(* for expression *)
forExp: (* TODO: not sure about escape *)
  FOR ID ASSIGN exp TO exp DO exp (A.ForExp({var = Symbol.symbol(ID), escape = ref true, lo = exp1, hi = exp2, body = exp3, pos = FORleft}))

(* let expression *)
letExp:
  LET decs IN END (A.LetExp({decs = decs, body = A.SeqExp([]), pos = LETleft}))
  | LET decs IN expSeq END (A.LetExp({decs = decs, body = A.SeqExp(expSeq), pos = LETleft}))

(* expression involving calculation *)
calcExp:
  arithExp (arithExp)
  | compareExp (compareExp)
  | booleanExp (booleanExp)

(* arithmatic expression on integers *)
arithExp:
  exp PLUS exp (A.OpExp({left = exp1, oper = A.PlusOp, right = exp2, pos = exp1left}))
  | exp MINUS exp (A.OpExp({left = exp1, oper = A.MinusOp, right = exp2, pos = exp1left}))
  | exp TIMES exp (A.OpExp({left = exp1, oper = A.TimesOp, right = exp2, pos = exp1left}))
  | exp DIVIDE exp (A.OpExp({left = exp1, oper = A.DivideOp, right = exp2, pos = exp1left}))
  | MINUS exp %prec UMINUS (A.OpExp({left = A.IntExp(0), oper = A.MinusOp, right = exp, pos = expleft}))

compareExp:
  exp EQ exp (A.OpExp({left = exp1, oper = A.EqOp, right = exp2, pos = exp1left}))
  | exp NEQ exp (A.OpExp({left = exp1, oper = A.NeqOp, right = exp2, pos = exp1left}))
  | exp GT exp (A.OpExp({left = exp1, oper = A.GtOp, right = exp2, pos = exp1left}))
  | exp LT exp (A.OpExp({left = exp1, oper = A.LtOp, right = exp2, pos = exp1left}))
  | exp GE exp (A.OpExp({left = exp1, oper = A.GeOp, right = exp2, pos = exp1left}))
  | exp LE exp (A.OpExp({left = exp1, oper = A.LeOp, right = exp2, pos = exp1left}))

booleanExp:
  exp AND exp (A.IfExp({test = exp1, then' = exp2, else' = SOME(A.IntExp(0)), pos = exp1left}))
  | exp OR exp (A.IfExp({test = exp1, then' = A.IntExp(1), else' = SOME(exp2), pos = exp1left}))
